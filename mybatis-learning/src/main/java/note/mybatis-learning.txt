## JDBC

### refer
- http://www.mybatis.org/mybatis-3/configuration.html#settings （官网 ）
- http://www.vogella.com/tutorials/MySQLJava/article.html
- http://chenjc-it.iteye.com/blog/1455688 (原理篇)
- https://tech.meituan.com/mybatis_cache.html(缓存)


### statement
Statement - Statement的接口
PreparedStatement - 将SQL语句预编译好存放到PreparedStatement，这样它可以被调用多次
CallableStatement - 用于执行 stored procedure


### scope and lifecycle
- SqlSessionFactoryBuilder, 这个类是用来创建 SqlSessionFactory的，只要SqlSessionFactory被创建出来了，它的任务就完成了，该实例就可以被回收了; 所以，建议它的scope为： method-scope
- SqlSessionFactory， 用于创建SqlSession，建议是application-scope，并且是在整个application中是单例
- SqlSession， 执行具体的SQL操作，建议是一个HTTP Request一个SqlSession，用完就释放掉，即close掉
- Mappers -是在SqlSession中使用的，其scope不能超过SqlSession的scope; 但一般的，它用完就可以回收了，所以建议它是一个 method-scope，


### 连接何时使用
是在SqlSession执行具体的SQL的时候，会从 datasource中获取一个connection，去执行具体的SQL语句; 即： 在SQL执行阶段会去获取
具体可以参考类： org.apache.ibatis.executor.BaseExecutor.getConnection

---
### SqlSession的autocommit

新建一个 SqlSession的时候，默认是
```
SqlSession session = sessionFactory.openSession();
```
这样，默认是一个 SqlSession，一个事务，需要用户在引用程序里手动的commit，like:
```
 private static void doCommitIfNeeded(SqlSession session) {
        try {
            Connection connection = session.getConnection();
            if (connection != null && !connection.getAutoCommit()) {
                connection.commit();
            }
        } catch (SQLException e) {

        }
    }
```

在Spring-mybatis中，是进行了封装的，将autoCommit都设置为了false，交由Spring的事务管理器进行处理
org.springframework.jdbc.datasource.DataSourceTransactionManager#doBegin
```

        Connection con = null;
        con = txObject.getConnectionHolder().getConnection();
            Integer previousIsolationLevel = DataSourceUtils.prepareConnectionForTransaction(con, definition);
            txObject.setPreviousIsolationLevel(previousIsolationLevel);
            if (con.getAutoCommit()) {
                txObject.setMustRestoreAutoCommit(true);
                if (this.logger.isDebugEnabled()) {
                    this.logger.debug("Switching JDBC Connection [" + con + "] to manual commit");
                }

                con.setAutoCommit(false);
            }
```

### Cache 和 Executor
二级Cache和Executor，都是采用装饰者模式进行包装的
Executor的化，比如 CachingExecutor
```
public class CachingExecutor implements Executor {

  private Executor delegate;
  private TransactionalCacheManager tcm = new TransactionalCacheManager();

  public CachingExecutor(Executor delegate) {
    this.delegate = delegate;
    delegate.setExecutorWrapper(this);
  }

```